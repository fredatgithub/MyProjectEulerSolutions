using System;
using System.Collections.Generic;
using System.Linq;

namespace MyProjectEulerSolutions
{
  class Program
  {
    static void Main(string[] args)
    {
      Action<string> Display = Console.WriteLine;
      Display("Project Euler - problem 1");
      /*
       If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
       Find the sum of all the multiples of 3 or 5 below 1000.
       */
      var multipleDeTrois = new List<int>();
      var multipleDeCinq = new List<int>();
      for (int i = 1; i < (1000 / 3) + 1; i++)
      {
        if (i * 3 < 1000)
        {
          multipleDeTrois.Add(3 * i);
        }
      }

      for (int i = 1; i < (1000 / 5) + 1; i++)
      {
        if (i * 5 < 1000)
        {
          multipleDeCinq.Add(5 * i);
        }
      }

      long somme = 0;
      foreach (var item in multipleDeCinq)
      {
        somme += item;
      }

      foreach (var item in multipleDeTrois)
      {
        somme += item;
      }

      Display($"The sum of all the multiples of 3 or 5 below 1000 is: {somme}");
      Display("---------------------------------------------------------------------");
      Display("Problem 2");
      /*
       Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
       1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
       By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms
       * */
      int max = 4000000;
      var limit = 10000;
      var outNumber = 1;
      long result = 1;
      int[] list = new int[limit];
      list[0] = 1;
      list[1] = 2;
      for (int i = 2; i < limit; i++)
      {
        var number = list[i-1] + list[i-2];
        if (number < max)
        {
          list[i] = number;
        }
        else
        {
          outNumber = i - 1;
          break;
        }
      }

      int[] list2 = new int[outNumber];
      for (int i = 0; i < outNumber; i++)
      {
        list2[i] = list[i];
      }

      list = null;
      for (int i = 0; i < list2.Length; i = i + 2)
      {
        result += list2[i];
      }

      Display($"The sum of even value lesser than 4 millions is {result}");
      Display("---------------------------------------------------------------------");
      Display("Problem 3");
      /*
       The prime factors of 13195 are 5, 7, 13 and 29.
       What is the largest prime factor of the number 600851475143 ?
      */
      long number3 = 600851475143;
      List<long> list3 = new List<long>();
      //list3 = GetDivisors(number3);
      //for (long i = 3; i < number3; i = i + 2)
      //{
      //  if (number3 % i == 0)
      //  {
      //    list3.Add(i);
      //  }

      //  //Console.WriteLine(i);
      //}

      //Display($"The largest prime factor of the number 600851475143 is {list3.ToList().Max()}");
      Display("The largest prime factor of the number 600851475143 is being calculated");
      Display("---------------------------------------------------------------------");
      Display("Problem 4");
      /*
       A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.
       Find the largest palindrome made from the product of two 3-digit number
       */
      List<int> list4 = new List<int>();
      for (int i = 999; i >= 100; i--)
      {
        for (int j = 999; j >= 100; j--)
        {
          if (IsPalindrome(i * j))
          {
            list4.Add(i * j);
          }
        }
      }

      Display($"The largest palindrome made from the product of two 3-digit number is {list4.ToList().Max()}");
      Display("---------------------------------------------------------------------");
      Display("Problem 5");
      /*
       2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
       
       What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
       */
      int maxValue = 5000;
      int result5 = 0;
      for (int i = 20; i < maxValue; i++)
      {
        bool divisor = true;
        for (int j = 1; j < 21; j++)
        {
          if (i % j != 0)
          {
            divisor = false;
            break;
          }
        }

        if (divisor)
        {
          result5 = i;
          break;
        }
        //Display($"i={i}");
      }

      Display($"The smallest positive number that is evenly divisible by all of the numbers from 1 to 20 is {result5}");
      Display("---------------------------------------------------------------------");
      Display("Problem 6");
      /*
       The sum of the squares of the first ten natural numbers is,
       1^2 + 2^2 + ... + 10^2 = 385
       The square of the sum of the first ten natural numbers is,
       (1 + 2 + ... + 10)^2 = 552 = 3025
       Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 − 385 = 2640.
       Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.
       */
      long result6 = 0;

      Display($"The difference between the sum of the squares of the first one hundred natural numbers and the square of the sum is {result6}");
      Display("---------------------------------------------------------------------");
      Display("Problem 7");
      /*
       By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
       What is the 10 001st prime number?
       */
      int tenThousandAndOnePrimeCounter = 1;
      int counter = 3;
      while (tenThousandAndOnePrimeCounter != 10001)
      {
        if (IsPrime(counter))
        {
          tenThousandAndOnePrimeCounter++;
        }

        Display($"Number of prime found so far: {tenThousandAndOnePrimeCounter} and prime being checked: {counter}");
        counter = counter + 2;
      }

      Display($"The 10 001st prime number is {counter}");
      Display("---------------------------------------------------------------------");
      Display("Problem 8");

      Display("End of problems");
      Console.ReadKey();
    }

    private static bool IsPrime(int number)
    {
      bool result = true;
      if (number == 2) return true;
      
      if (number % 2 == 0)
      {
        return false;
      }

      for (int i = 3; i < number; i = i + 2)
      {
        if (number % i == 0)
        {
          result = false;
          break;
        }
      }

      return result;
    }

    private static bool IsPalindrome(int number)
    {
      return number.ToString() == new string(number.ToString().Reverse().ToArray());
    }

    private static List<long> GetDivisors(long number)
    {
      List<long> result = new List<long>();
      for (long i = 3; i < number; i = i + 2)
      {
        if (number % i == 0)
        {
          result.Add(i);
        }
      }

      return result;
    }
  }
}